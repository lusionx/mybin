#!/usr/bin/env zx

const Qs = require("querystring")

const input = await stdin()
const inputLines = input.split('\n').filter(e => e)

async function stat() {
  for (const loc of inputLines) {
    await $`mc --json stat ${loc}`
  }
}

async function setTag(loc, tag) {
  const resp = await $`mc tag list --json ${loc}`
  if (tag === true) {
    return echo(resp)
  }
  let { target } = JSON.parse(resp.stdout)
  if (!target) {
    target = {}
  }
  const tags = Qs.parse(tag)
  Object.assign(target, tags)
  await $`mc tag set --json ${loc} ${Qs.stringify(target)}`
}

function isFullPath(tar) {
  return !!path.extname(tar)
}

async function copy(loc, tar) {
  if (!isFullPath(loc)) {
    return // source dir
  }
  if (path.extname(loc) === path.extname(tar)) {
    // full path
    await $`mc cp ${loc} ${tar}`
    return
  }

  await $`mkdir -p ${tar}`
  await $`mc cp ${loc} ${tar}`
}

async function shareLink(loc) {
  const res = await $`mc share download -E 48h --json ${loc}`
  const { share } = JSON.parse(res.stdout)
  return share
}

async function genHtml(lines) {
  const aTags = []
  for (const name of lines) {
    const href = await shareLink(name)
    aTags.push(`<li><a target="_blank" href="${href}">${name}</a></li>`)
  }
  return `<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
  </head>
  <body>
    <ul>\n${aTags.join("\n")}\n</ul>
  </body>
</html>`
}

async function main() {
  if (argv.stat) {
    await stat()
  } else if (argv.tag) {
    for (const loc of inputLines) {
      await setTag(loc, argv.tag)
    }
  } else if (argv.cp) {
    const dist = argv.cp
    if (isFullPath(dist)) {
      await copy(inputLines[0], dist)
    }
    else {
      for (const loc of inputLines) {
        await copy(loc, dist)
      }
    }
  } else if (argv.html) {
    const res = await genHtml(inputLines)
    if (typeof argv.html === "string") {
      fs.outputFileSync(argv.html, res)
    }
  } else {
    for (const loc of inputLines) {
      echo(loc)
    }
  }
}

main()
